{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/progressBar.js","comps/uploadForm.js","App.js","index.js"],"names":["projectStorage","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","projectFireStore","timestamp","FieldValue","serverTimestamp","UseFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.803fe4bc.chunk.js","sourcesContent":["import * as firebase from 'firebase/app'; //importar tudo do firebase\r\nimport { initializeApp } from 'firebase';\r\nimport 'firebase/storage'; // storage para armazenar fotos\r\nimport 'firebase/firestore'; //firestore para armazenar dados no firebase\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n\r\n    apiKey: \"AIzaSyAbUSkc4La2-m6lUW-m9EGimJTGXxiF0A4\",\r\n  \r\n    authDomain: \"firegram-63e10.firebaseapp.com\",\r\n  \r\n    projectId: \"firegram-63e10\",\r\n  \r\n    storageBucket: \"firegram-63e10.appspot.com\",\r\n  \r\n    messagingSenderId: \"999748832584\",\r\n  \r\n    appId: \"1:999748832584:web:25b87a3849c784f960377d\"\r\n  \r\n  };\r\n  \r\n  \r\n  // Initialize Firebase\r\n  \r\n  const app = initializeApp(firebaseConfig);\r\n\r\n  const projectStorage = firebase.storage();\r\n  const projectFireStore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n  export { projectStorage, projectFireStore, timestamp };","import { useState, useEffect } from \"react\";\r\nimport { projectFireStore} from \"../firebase/config\";\r\n\r\nconst UseFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFireStore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) =>{\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id})\r\n                });\r\n                setDocs(documents);\r\n            });\r\n\r\n            return () => unsub();\r\n\r\n    }, [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default UseFirestore;","import React from 'react';\r\nimport UseFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ( { setSelectedImg } ) => {\r\n    const { docs } = UseFirestore('images');\r\n    console.log(docs)\r\n\r\n    return (\r\n        <div className='img-grid'>\r\n            {docs && docs.map(doc => (\r\n                <motion.div className='img-wrap' key={doc.id}\r\n                    layout\r\n                    whileHover={{opacity : 1}}\r\n                    onClick={() => setSelectedImg(doc.url)}\r\n                >\r\n                    <motion.img src={doc.url} alt=\"uploaded pic\"\r\n                        initial = {{opacity:0}}\r\n                        animate = {{opacity:1}}\r\n                        transition={{delay : 1}}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ selectedImg , setSelectedImg}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImg(null);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <motion.div className='backdrop' onClick={handleClick}\r\n            initial={{opacity: 0}}\r\n            animate={{opacity: 1}}\r\n        >\r\n            <motion.img src={selectedImg}\r\n                initial={{y: \"-100vh\"}}\r\n                animate={{y: 0}}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>Firegram</h1>\r\n      <h2>Suas Fotos</h2>\r\n      <p>Olá! Essa, é minha descrição! Se não postei nenhuma foto ainda, é porque eu talvez não tenha pressionado o botão abaixo :3</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFireStore, timestamp } from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //referencias\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFireStore.collection('images');\r\n\r\n\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () =>{\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp()\r\n            collectionRef.add({ url, createdAt })\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react'\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n    \r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n\r\n    return (\r\n        <motion.div className='progress-bar'\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%' }}\r\n        ></motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from 'react'\r\nimport ProgressBar from './progressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/gif', 'image/svg', 'image/webp']\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        \r\n        if (selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError('');\r\n        } else {\r\n            setFile(null);\r\n            setError('Favor selecionar um arquivo de imagem (png, jpeg, gif ou svg)');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n            <input type='file' onChange={changeHandler}/>\r\n            <span>+</span>\r\n            </label>\r\n            <div className='output'>\r\n                { error && <div className='error'>{ error }</div> }\r\n                \r\n                {file && <ProgressBar file={file} setFile={setFile}/>}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from 'react';\r\n\r\nimport ImageGrid from './comps/ImageGrid';\r\nimport Modal from './comps/Modal';\r\nimport Title from './comps/Title';\r\nimport UploadForm from './comps/uploadForm';\r\n\r\nfunction App() {\r\n  const [selectedImg, setSelectedImg] = useState(null);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Title/>\r\n      <UploadForm/>\r\n      <ImageGrid setSelectedImg={setSelectedImg}/>\r\n      {selectedImg && <Modal selectedImg = {selectedImg} setSelectedImg = {setSelectedImg}/> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}